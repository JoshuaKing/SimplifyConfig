#!/bin/bash
localbin=~/.bin
mkdir -p $localbin

# Stream Twitch to VLC
alias stream="livestreamer --hls-segment-threads 5 --player-passthrough hls --default-stream high $1"

# Aliases for certain SSH Keys
alias sshwork="ssh -i ~/.ssh/work_from_home_rsa"
alias awssh="ssh -l ec2-user"
alias ewetest="ssh -i ~/.ssh/ewetest -l ec2-user"

# With the .m2/settings.xml profile - disable many tests, checks, and only run the bare minimum to compile and then execute
alias mvnq="mvn package -Pquick && ./start.sh"

# list-long and list-long-alphabetic - Display only useful ls data, in a presentable format (human-readable sizing, correct width columns)
ll() {
    if [ $# == 1 ] && [ -f $1 ]; then
        vim $1 
    else
	    ls -lhPpA $@ | tr -s ' ' | cut -d' ' -f1,3,5,9 | column -t
    fi
}

# source profile quickly
alias profile="source ~/.bash_profile"

# git add, then commit changes, then push
publish() {
    git add -A
    git status
    git commit -m "$@"
    read -p "Press Enter to push changes"
    git push
}

wgit() {
    GIT_SSH_COMMAND="ssh -i ~/.ssh/work_from_home_rsa" git $@
    unset GIT_SSH_COMMAND
}

function prewe {
    user="josking" # $USER
    remote="origin"
    # url="$(git remote get-url ${remote})"
    url="$(git remote -v | head -1 | cut -f2 | cut -f1 -d' ')"
    domain=$(echo -n "${url}" | sed "s/git@\(.*\):.*/\1/")
    repo=$(echo -n "${url}" | sed "s/.*:\(.*\).git/\1/")
    branch="$(git rev-parse --abbrev-ref HEAD)"
    curl -XPOST -u "$user" -k "https://${domain}/api/v3/repos/${repo}/pulls" -d '{
        "base": "master",
        "head": "'"${branch}"'",
        "title": "'"${1}"'"
    }'
}

alias gitpr="prewe"

# quickly switch between work/home projects
alias home="cd ~/Projects"
alias work="cd ~/Work"

# alias for Notes app
#alias note="java -jar ~/.bin/Note.jar $@"
#echo "new notttteee " > ~/.vim_notes_template
#export VIM_NOTES_TEMPLATE="~/.vim_notes_template"
note() {
    filename="note:$@"
    vim "${filename}"
}
alias notes="ls ~/.vim/bundle/vim-notes/misc/notes/user/"

# run command in the background w/o output
run() {
    filename="$@"
    filenamenospace="/tmp/${filename// /}.log"
    nohup $@ >"$filenamenospace" 2>&1 &
}

# kill service on TCP port
killport() {
    kill -TERM `lsof -i "tcp:$1" | tail -1 | tr -s ' ' | cut -d ' ' -f 2`
}

# git aliases
alias gs="git status"
alias ga="git add -A"
alias gc="git commit -m"
alias master="git stash; git checkout master; git pull; git stash pop"

# use vim configuration if none provided 
if [ ! -f ~/.vimrc ]; then 
    git clone git://github.com/amix/vimrc.git ~/.vim_runtime
    sh ~/.vim_runtime/install_awesome_vimrc.sh

    # Filetype plugin
    mkdir -p ~/.vim/ftplugin/
    # Solarized Colorscheme
    mkdir -p ~/.vim/colors/
    cp ~/.vim_runtime/sources_non_forked/vim-colors-solarized/colors/solarized.vim ~/.vim/colors/ 
    # Ocean Deep Color Scheme
    curl -LSso ~/.vim/colors/oceandeep.vim https://raw.githubusercontent.com/vim-scripts/oceandeep/master/colors/oceandeep.vim
    # Pathogen
    mkdir -p ~/.vim/autoload ~/.vim/bundle
    curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
    # Vim Notes
    git clone git@github.com:xolox/vim-notes.git ~/.vim/bundle/vim-notes
    # Vim Misc
    git clone git@github.com:xolox/vim-misc.git ~/.vim/bundle/vim-misc
    # Vim Sensible
    git clone git://github.com/tpope/vim-sensible.git ~/.vim/bundle/vim-sensible
    # Custom vim file
    cat > ~/.vim_runtime/my_configs.vim << EOL
        execute pathogen#infect()
        set number
       	syntax on
        filetype plugin indent on 
        let g:notes_suffix='.note'
	    "colorscheme oceandeep
	    set background=dark
	    colorscheme solarized
        set cmdheight=1
        set numberwidth=3
EOL
fi

export PS1="\n\[$(tput bold)\]\u:\W\\$ \[$(tput sgr0)\]"
export HISTSIZE=1000
export HISTFILESIZE=5000

# Setting PATH for Python 3.5
# The original version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}"
export PATH
